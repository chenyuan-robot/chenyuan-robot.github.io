(()=>{"use strict";var e={381:(e,t,i)=>{i.d(t,{A:()=>s});const s=class{constructor(){this.events={}}on(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}off(e,t){this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))}emit(e,...t){this.events[e]&&this.events[e].forEach((e=>e(...t)))}}},916:(e,t,i)=>{async function s(e,t){try{const i=await fetch(e,{method:"POST",headers:{"Content-Type":"text/plain"},body:t});if(!i.ok)throw new Error(`HTTP error! Status ${i.status}`);return await i.text()}catch(e){throw e}}i.d(t,{D:()=>s})},510:(e,t,i)=>{i.d(t,{A:()=>n});var s=i(381);const n=class{constructor(e,t,i,n){this._eventEmitter=new s.A,this._signalWsConn=new WebSocket(i),this._signalWsConn.onopen=this.onOpen.bind(this),this._signalWsConn.onclose=this.onClose.bind(this),this._signalWsConn.onerror=this.onError.bind(this),this._signalWsConn.onmessage=this.onMessage.bind(this),this._peerName=n,this._connected=!1,this._peerId=void 0,this._sents=new Map,this._seq_id=0,this._pending_messages=[]}getNextSeqId(){return++this._seq_id}onOpen(){console.log("onOpen"),this._connected=!0;for(let e=0;e<this._pending_messages.length;++e)this._signalWsConn.send(this._pending_messages[e]);this._pending_messages=[]}onClose(){console.log("onClose"),this._connected=!1,this.emit("disconnected")}onError(){console.log("onError"),this._connected=!1,this.emit("disconnected")}onMessage(e){console.log("onMessage",e.data);let t=e.data,i=JSON.parse(t),s=i.msg_id,n=i.seq_id;if(void 0===n){if(105===s){let e=i.room_id,t=i.type,s=i.body;for(let i=0;i<s.length;++i){let n=s[i];0===t?this.emit("newPeer",e,n.peer_id,n.peer_name,n.role_type):1===t?this.emit("removePeer",e,n.peer_id,n.peer_name,n.role_type):console.log(`Unknown type ${t}`)}}else if(106===s){let e=i.room_id,t=i.type,s=i.body;for(let i=0;i<s.length;++i){let n=s[i];0===t?this.emit("newStream",e,n.peer_id,n.channel_id,n.is_video):1===t?this.emit("removeStream",e,n.peer_id,n.channel_id,n.is_video):console.log(`Unknown type ${t}`)}}}else{const e=this._sents.get(n);if(!e)return;e.resolve(t)}}on(e,t){this._eventEmitter.on(e,t)}off(e,t){this._eventEmitter.off(e,t)}emit(e,...t){this._eventEmitter.emit(e,...t)}async requestLogin(e){let t={msg_id:100,seq_id:this.getNextSeqId(),peer_name:this._peerName,role_type:e};return await this.request(t.seq_id,JSON.stringify(t))}async requestJoinRoom(e){let t={msg_id:102,seq_id:this.getNextSeqId(),room_id:e};return await this.request(t.seq_id,JSON.stringify(t))}notifyLeaveRoom(e){let t={msg_id:104,room_id:e};this.notify(JSON.stringify(t))}async requestPublish(e,t){let i={msg_id:107,seq_id:this.getNextSeqId(),room_id:e,channel_id:t};return await this.request(i.seq_id,JSON.stringify(i))}notifyUnPublish(e,t){let i={msg_id:109,room_id:e,channel_id:t};this.notify(JSON.stringify(i))}async requestSubscribe(e){let t={msg_id:110,seq_id:this.getNextSeqId(),channel_id:e};return await this.request(t.seq_id,JSON.stringify(t))}notifyUnSubscribe(e){let t={msg_id:112,channel_id:e};this.notify(JSON.stringify(t))}async request(e,t){return this._connected?this._signalWsConn.send(t):this._pending_messages.push(t),new Promise(((t,i)=>{const s={id:e,resolve:i=>{this._sents.delete(e)&&(clearTimeout(s.timer),t(i))},reject:t=>{this._sents.delete(e)&&(clearTimeout(s.timer),i(t))},timer:setTimeout((()=>{this._sents.delete(e)&&i(new Error("request timeout"))}),5e3),close:()=>{clearTimeout(s.timer),i(new Error("closed"))}};this._sents.set(e,s)}))}notify(e){this._connected?this._signalWsConn.send(e):this._pending_messages.push(e)}close(){this._signalWsConn&&(this._signalWsConn.close(),this._signalWsConn=null)}}},578:(e,t,i)=>{var s=i(381),n=i(510),o=i(916);class r{constructor(e,t,i,n){this._eventEmitter=new s.A,this._signalClient,this._appId=e,this._token=t,this._serverUrl=i,this._peerName=n,this._roomId,this._roomChannelId2PubPc=new Map,this._roomChannelId2PubTrack=new Map,this._roomChannelId2SubPc=new Map,this._channelId2PubPc=new Map,this._channelId2SubPc=new Map,this._channelId2PubTrack=new Map}on(e,t){this._eventEmitter.on(e,t)}off(e,t){this._eventEmitter.off(e,t)}emit(e,...t){this._eventEmitter.emit(e,...t)}_newPeer(e,t,i,s){this.emit("newPeer",{peer_id:t,peer_name:i,role_type:s},e)}_removePeer(e,t,i,s){this.emit("removePeer",{peer_id:t,peer_name:i,role_type:s},e)}_newStream(e,t,i,s){this.emit("newStream",{peer_id:t,channel_id:i,is_video:s},e)}_removeStream(e,t,i,s){this.emit("removeStream",{peer_id:t,channel_id:i,is_video:s},e)}_reconnect(){this._roomId&&this.emit("reconnect",this._roomId,this._peerName)}async joinRoom(e){return new Promise((async(t,i)=>{if(!this._signalClient){this._signalClient=new n.A(this._appId,this._token,this._serverUrl,this._peerName);try{let e=await this._signalClient.requestLogin(1),t=JSON.parse(e);console.log(`login success: ${t.peer_id}`)}catch(e){i(new Error("login failed",e))}}try{let t=await this._signalClient.requestJoinRoom(e),i=JSON.parse(t);console.log(`join room result: ${i.code}`)}catch(e){i(e)}this._signalClient.on("newPeer",this._newPeer.bind(this)),this._signalClient.on("removePeer",this._removePeer.bind(this)),this._signalClient.on("newStream",this._newStream.bind(this)),this._signalClient.on("removeStream",this._removeStream.bind(this)),this._signalClient.on("disconnected",this._reconnect.bind(this)),this._roomId=e,t()}))}leaveRoom(){this._roomId&&(this._signalClient.off("newPeer",this._newPeer.bind(this)),this._signalClient.off("removePeer",this._removePeer.bind(this)),this._signalClient.off("newStream",this._newStream.bind(this)),this._signalClient.off("removeStream",this._removeStream.bind(this)),this._signalClient.off("disconnected",this._reconnect.bind(this)),this.unpublishAllToRoom(),this.unsubscribeAllToRoom(),this._signalClient.notifyLeaveRoom(this._roomId),this._roomId=void 0)}async publishToRoom(e,t){return new Promise((async(i,s)=>{this._roomId||s(new Error("no in room current"));try{let s=await this._signalClient.requestPublish(this._roomId,e),n=JSON.parse(s).whip_url;const r=new RTCPeerConnection;r.addTrack(t);let a=await r.createOffer();await r.setLocalDescription(a);let l=await(0,o.D)(n,a.sdp),h=JSON.parse(l);if(void 0===h.sdp)throw new Error("remote sdp empty");let c=new RTCSessionDescription({sdp:h.sdp,type:h.type});await r.setRemoteDescription(c),this._roomChannelId2PubPc.set(e,r),this._roomChannelId2PubTrack.set(e,t),console.log("publishToRoom success",e),i()}catch(e){s(new Error("publishToRoom failed",e))}}))}_closeRoomPublishPc(e){let t=this._roomChannelId2PubPc.get(e);t&&(t.close(),t=null,this._roomChannelId2PubPc.delete(e)),this._signalClient.notifyUnPublish(this._roomId,e)}_removeRoomChannelPubTrack(e){this._roomChannelId2PubTrack.delete(e)}unpublishToRoom(e){this._roomId&&(this._closeRoomPublishPc(e),this._removeRoomChannelPubTrack(e))}unpublishAllToRoom(){if(this._roomId){let e=this._roomChannelId2PubPc.keys();for(let t of e)this._closeRoomPublishPc(t),this._removeRoomChannelPubTrack(t)}}async subscribeFromRoom(e,t){if(this._roomId)for(let i=0;i<e.length;++i){let s=e[i],n=await this._signalClient.requestSubscribe(s),r=JSON.parse(n).whep_url;const a=new RTCPeerConnection;a.ontrack=e=>{void 0===t.mediaStream&&(t.mediaStream=new MediaStream,t.srcObject=t.mediaStream),t.mediaStream.addTrack(e.track)};let l=await a.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});await a.setLocalDescription(l);let h=await(0,o.D)(r,l.sdp),c=JSON.parse(h);if(void 0===c.sdp)throw new Error("remote sdp empty");let d=new RTCSessionDescription({sdp:c.sdp,type:c.type});await a.setRemoteDescription(d),this._roomChannelId2SubPc.set(s,a)}}unsubscribeFromRoom(e){if(this._roomId){let t=this._roomChannelId2SubPc.get(e);t&&(t.close(),t=null,this._roomChannelId2SubPc.delete(e)),this._signalClient.notifyUnSubscribe(e)}}unsubscribeAllToRoom(){this._roomId&&(this._roomChannelId2SubPc.forEach(((e,t)=>{e&&(e.close(),e=null),this._signalClient.notifyUnSubscribe(t)})),this._roomChannelId2SubPc.clear())}async publish(e,t){return new Promise((async(i,s)=>{try{if(!this._signalClient){this._signalClient=new n.A(this._appId,this._token,this._serverUrl,this._peerName);try{let e=this._signalClient.requestLogin(1),t=JSON.parse(e);console.log(`login success: ${t.peer_id}`)}catch(e){s(new Error("login failed",e))}}let r=await this._signalClient.requestPublish(void 0,e),a=JSON.parse(r).whip_url;const l=new RTCPeerConnection;l.addTrack(t);let h=await l.createOffer();await l.setLocalDescription(h);let c=await(0,o.D)(a,h.sdp),d=JSON.parse(c);if(void 0===d.sdp)throw new Error("remote sdp empty");let _=new RTCSessionDescription({sdp:d.sdp,type:d.type});await l.setRemoteDescription(_),this._channelId2PubPc.set(e,l),this._channelId2PubTrack.set(e,t),i()}catch(e){s(new Error("publish failed",e))}}))}_closePublishPc(e){let t=this._channelId2PubPc.get(e);t&&(t.close(),t=null,this._channelId2PubPc.delete(e),this._signalClient.notifyUnPublish(void 0,e))}_removeChannelPubTrack(e){this._channelId2PubTrack.delete(e)}unpublish(e){this._closePublishPc(e),this._removeChannelPubTrack(e)}unpublishAll(){let e=this._roomChannelId2PubPc.keys();for(let t of e)this._closePublishPc(t),this._removeChannelPubTrack(t)}async subscribe(e,t){if(!this._signalClient){this._signalClient=new n.A(this._appId,this._token,this._serverUrl,this._peerName);try{let e=this._signalClient.requestLogin(1),t=JSON.parse(e);console.log(`login success: ${t.peer_id}`)}catch(e){return}}for(let i=0;i<e.length;++i){let s=e[i],n=this._signalClient.requestSubscribe(s),r=JSON.parse(n).whep_url;const a=new RTCPeerConnection;a.ontrack=e=>{void 0===t.mediaStream&&(t.mediaStream=new MediaStream,t.srcObject=t.mediaStream),t.mediaStream.addTrack(e.track)};let l=await a.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});await a.setLocalDescription(l);let h=await(0,o.D)(r,l.sdp),c=JSON.parse(h);if(void 0===c.sdp)throw new Error("remote sdp empty");let d=new RTCSessionDescription({sdp:c.sdp,type:c.type});await a.setRemoteDescription(d),this._channelId2SubPc.set(s,a)}}unsubscribe(e){let t=this._channelId2SubPc.get(e);t&&(t.close(),t=null,this._channelId2SubPc.delete(e)),this._signalClient.notifyUnSubscribe(e)}unsubscribeAll(){this._channelId2SubPc.forEach(((e,t)=>{e&&(e.close(),e=null),this._signalClient.notifyUnSubscribe(t)})),this._channelId2SubPc.clear()}close(){this._signalClient&&(this._signalClient.close(),this._signalClient=null)}}window.StreamerSdk={createClient:function(e,t,i,s){return new r(e,t,i,s)},createMicrophoneTracks:async function(){return new Promise((async(e,t)=>{if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)try{e((await navigator.mediaDevices.getUserMedia({audio:!0,video:!1})).getAudioTracks())}catch(e){t(new Error(`getUserMedia failed, error: ${e}`))}else t(new Error("getUserMedia is not supported"))}))},createCameraTracks:async function(e={}){return new Promise((async(t,i)=>{if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){var s={video:{...e}};try{t((await navigator.mediaDevices.getUserMedia(s)).getVideoTracks())}catch(e){i(new Error(`getUserMedia failed, error: ${e}`))}}else i(new Error("getUserMedia is not supported"))}))},createDesktopTracks:function(e={}){return new Promise((async(t,i)=>{if(navigator.mediaDevices&&navigator.mediaDevices.getDisplayMedia){var s={video:{...e}};try{t((await navigator.mediaDevices.getDisplayMedia(s)).getVideoTracks())}catch(e){i(new Error(`getDisplayMedia failed, error: ${e}`))}}else i(new Error("getDisplayMedia is not supported"))}))}}}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,i),o.exports}i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i(578),i(510),i(381),i(916)})();